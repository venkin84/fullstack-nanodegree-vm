<html><head><meta content="text/html; charset=UTF-8" http-equiv="content-type"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');.lst-kix_k7lkn99i7v8f-3>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-3}ol.lst-kix_k7lkn99i7v8f-4.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-4 0}.lst-kix_nf51834beos7-2>li{counter-increment:lst-ctn-kix_nf51834beos7-2}ol.lst-kix_nf51834beos7-5.start{counter-reset:lst-ctn-kix_nf51834beos7-5 0}ol.lst-kix_k7lkn99i7v8f-1.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-1 0}ol.lst-kix_nf51834beos7-8.start{counter-reset:lst-ctn-kix_nf51834beos7-8 0}.lst-kix_k7lkn99i7v8f-5>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-5}.lst-kix_k7lkn99i7v8f-2>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-2}.lst-kix_nf51834beos7-3>li{counter-increment:lst-ctn-kix_nf51834beos7-3}.lst-kix_nf51834beos7-5>li:before{content:"" counter(lst-ctn-kix_nf51834beos7-5,lower-roman) ". "}.lst-kix_nf51834beos7-6>li:before{content:"" counter(lst-ctn-kix_nf51834beos7-6,decimal) ". "}ol.lst-kix_k7lkn99i7v8f-7.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-7 0}.lst-kix_nf51834beos7-7>li:before{content:"" counter(lst-ctn-kix_nf51834beos7-7,lower-latin) ". "}.lst-kix_nf51834beos7-8>li:before{content:"" counter(lst-ctn-kix_nf51834beos7-8,lower-roman) ". "}.lst-kix_k7lkn99i7v8f-0>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-0,decimal) ". "}ol.lst-kix_nf51834beos7-2.start{counter-reset:lst-ctn-kix_nf51834beos7-2 0}.lst-kix_k7lkn99i7v8f-2>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-2,lower-roman) ". "}.lst-kix_k7lkn99i7v8f-0>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-0}.lst-kix_k7lkn99i7v8f-1>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-1,lower-latin) ". "}.lst-kix_k7lkn99i7v8f-5>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-5,lower-roman) ". "}.lst-kix_k7lkn99i7v8f-4>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-4,lower-latin) ". "}.lst-kix_k7lkn99i7v8f-3>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-3,decimal) ". "}ol.lst-kix_nf51834beos7-3.start{counter-reset:lst-ctn-kix_nf51834beos7-3 0}.lst-kix_nf51834beos7-4>li:before{content:"" counter(lst-ctn-kix_nf51834beos7-4,lower-latin) ". "}.lst-kix_nf51834beos7-3>li:before{content:"" counter(lst-ctn-kix_nf51834beos7-3,decimal) ". "}.lst-kix_nf51834beos7-1>li:before{content:"\0025cb  "}.lst-kix_k7lkn99i7v8f-6>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-6,decimal) ". "}.lst-kix_nf51834beos7-0>li:before{content:"\0025cf  "}.lst-kix_nf51834beos7-2>li:before{content:"" counter(lst-ctn-kix_nf51834beos7-2,lower-roman) ". "}.lst-kix_nf51834beos7-4>li{counter-increment:lst-ctn-kix_nf51834beos7-4}.lst-kix_k7lkn99i7v8f-8>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-8,lower-roman) ". "}.lst-kix_k7lkn99i7v8f-7>li:before{content:"" counter(lst-ctn-kix_k7lkn99i7v8f-7,lower-latin) ". "}ol.lst-kix_k7lkn99i7v8f-3.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-3 0}.lst-kix_k7lkn99i7v8f-6>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-6}ol.lst-kix_k7lkn99i7v8f-5{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-4{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-7{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-6{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-8{list-style-type:none}.lst-kix_nf51834beos7-7>li{counter-increment:lst-ctn-kix_nf51834beos7-7}ol.lst-kix_nf51834beos7-4.start{counter-reset:lst-ctn-kix_nf51834beos7-4 0}ol.lst-kix_k7lkn99i7v8f-2.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-2 0}ol.lst-kix_k7lkn99i7v8f-1{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-0{list-style-type:none}.lst-kix_ppozc7ekcm7w-1>li:before{content:"\0025cb  "}ol.lst-kix_k7lkn99i7v8f-3{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-2{list-style-type:none}ol.lst-kix_nf51834beos7-6{list-style-type:none}.lst-kix_ppozc7ekcm7w-2>li:before{content:"\0025a0  "}ol.lst-kix_nf51834beos7-7{list-style-type:none}ol.lst-kix_nf51834beos7-4{list-style-type:none}.lst-kix_nf51834beos7-8>li{counter-increment:lst-ctn-kix_nf51834beos7-8}ol.lst-kix_nf51834beos7-5{list-style-type:none}.lst-kix_ppozc7ekcm7w-0>li:before{content:"\0025cf  "}.lst-kix_ppozc7ekcm7w-4>li:before{content:"\0025cb  "}ol.lst-kix_nf51834beos7-8{list-style-type:none}.lst-kix_ppozc7ekcm7w-3>li:before{content:"\0025cf  "}.lst-kix_ppozc7ekcm7w-6>li:before{content:"\0025cf  "}ol.lst-kix_nf51834beos7-2{list-style-type:none}ol.lst-kix_nf51834beos7-3{list-style-type:none}.lst-kix_ppozc7ekcm7w-5>li:before{content:"\0025a0  "}.lst-kix_ppozc7ekcm7w-8>li:before{content:"\0025a0  "}ol.lst-kix_k7lkn99i7v8f-8.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-8 0}.lst-kix_ppozc7ekcm7w-7>li:before{content:"\0025cb  "}ol.lst-kix_nf51834beos7-6.start{counter-reset:lst-ctn-kix_nf51834beos7-6 0}ol.lst-kix_k7lkn99i7v8f-0.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-0 0}.lst-kix_nf51834beos7-6>li{counter-increment:lst-ctn-kix_nf51834beos7-6}.lst-kix_k7lkn99i7v8f-8>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-8}ul.lst-kix_vios0yk75fr-2{list-style-type:none}.lst-kix_vios0yk75fr-1>li:before{content:"\0025cb  "}ul.lst-kix_vios0yk75fr-3{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-6.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-6 0}ul.lst-kix_vios0yk75fr-0{list-style-type:none}ul.lst-kix_vios0yk75fr-1{list-style-type:none}.lst-kix_nf51834beos7-5>li{counter-increment:lst-ctn-kix_nf51834beos7-5}.lst-kix_vios0yk75fr-2>li:before{content:"\0025a0  "}.lst-kix_vios0yk75fr-3>li:before{content:"\0025cf  "}.lst-kix_vios0yk75fr-4>li:before{content:"\0025cb  "}.lst-kix_vios0yk75fr-5>li:before{content:"\0025a0  "}.lst-kix_vios0yk75fr-8>li:before{content:"\0025a0  "}.lst-kix_vios0yk75fr-7>li:before{content:"\0025cb  "}.lst-kix_vios0yk75fr-6>li:before{content:"\0025cf  "}ul.lst-kix_ppozc7ekcm7w-7{list-style-type:none}ul.lst-kix_ppozc7ekcm7w-6{list-style-type:none}ul.lst-kix_ppozc7ekcm7w-8{list-style-type:none}ul.lst-kix_ppozc7ekcm7w-3{list-style-type:none}ul.lst-kix_ppozc7ekcm7w-2{list-style-type:none}ul.lst-kix_nf51834beos7-0{list-style-type:none}ul.lst-kix_ppozc7ekcm7w-5{list-style-type:none}ul.lst-kix_nf51834beos7-1{list-style-type:none}ul.lst-kix_ppozc7ekcm7w-4{list-style-type:none}ol.lst-kix_k7lkn99i7v8f-5.start{counter-reset:lst-ctn-kix_k7lkn99i7v8f-5 0}.lst-kix_k7lkn99i7v8f-7>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-7}ul.lst-kix_vios0yk75fr-8{list-style-type:none}.lst-kix_k7lkn99i7v8f-1>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-1}ul.lst-kix_vios0yk75fr-6{list-style-type:none}ul.lst-kix_vios0yk75fr-7{list-style-type:none}ul.lst-kix_vios0yk75fr-4{list-style-type:none}ul.lst-kix_vios0yk75fr-5{list-style-type:none}.lst-kix_k7lkn99i7v8f-4>li{counter-increment:lst-ctn-kix_k7lkn99i7v8f-4}.lst-kix_vios0yk75fr-0>li:before{content:"\0025cf  "}ul.lst-kix_ppozc7ekcm7w-1{list-style-type:none}ul.lst-kix_ppozc7ekcm7w-0{list-style-type:none}ol.lst-kix_nf51834beos7-7.start{counter-reset:lst-ctn-kix_nf51834beos7-7 0}ol{margin:0;padding:0}table td,table th{padding:0}.c36{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:0pt;border-right-width:0pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:0pt;border-top-style:solid;background-color:#efefef;border-left-style:solid;border-bottom-width:0pt;width:504pt;border-top-color:#000000;border-bottom-style:solid}.c7{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:106.5pt;border-top-color:#000000;border-bottom-style:solid}.c5{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:191.2pt;border-top-color:#000000;border-bottom-style:solid}.c10{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:180pt;border-top-color:#000000;border-bottom-style:solid}.c34{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:132.8pt;border-top-color:#000000;border-bottom-style:solid}.c25{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:296.2pt;border-top-color:#000000;border-bottom-style:solid}.c32{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:73.5pt;border-top-color:#000000;border-bottom-style:solid}.c8{color:#0b5394;font-weight:normal;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:"Consolas";font-style:normal}.c11{background-color:#ffffff;font-weight:normal;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Consolas";font-style:normal}.c24{background-color:#d9d9d9;font-weight:normal;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c41{font-weight:normal;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c35{background-color:#d9d9d9;font-weight:normal;text-decoration:none;vertical-align:baseline;font-style:normal}.c27{text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c18{border-spacing:0;border-collapse:collapse;margin-right:auto}.c43{font-weight:normal;text-decoration:none;vertical-align:baseline;font-style:normal}.c15{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c3{font-size:12pt;color:#0b5394;text-decoration:underline}.c0{background-color:#ffffff;font-size:14pt;color:#222222}.c2{line-height:1.2;orphans:2;widows:2}.c26{background-color:#ffffff;max-width:504pt;padding:14.4pt 54pt 72pt 54pt}.c16{padding-top:0pt;padding-bottom:0pt;text-align:left}.c48{orphans:2;widows:2}.c19{background-color:#ffffff;font-family:"Consolas"}.c39{margin-left:72pt;padding-left:0pt}.c28{padding:0;margin:0}.c29{margin-left:36pt;padding-left:0pt}.c20{color:#1155cc;text-decoration:underline}.c33{color:inherit;text-decoration:inherit}.c1{background-color:#ffffff;font-size:12pt}.c9{font-family:"Consolas";color:#0b5394}.c4{margin-left:58.5pt;margin-right:63pt}.c31{padding-bottom:10pt;text-align:center}.c21{font-size:16pt}.c14{height:11pt}.c6{color:#222222}.c42{margin-left:36pt}.c17{font-size:12pt}.c44{text-align:center}.c23{color:#0b5394}.c38{color:#000000}.c22{font-family:"Consolas"}.c37{text-decoration:underline}.c13{font-weight:bold}.c40{background-color:#ffffff}.c45{font-weight:normal}.c30{line-height:1.2}.c46{font-style:italic}.c47{background-color:#d9d9d9}.c12{height:0pt}.title{padding-top:0pt;color:#000000;font-size:21pt;padding-bottom:0pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:13pt;padding-bottom:10pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:10pt;color:#000000;font-size:16pt;padding-bottom:0pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:10pt;color:#000000;font-weight:bold;font-size:13pt;padding-bottom:0pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:8pt;color:#666666;font-weight:bold;font-size:12pt;padding-bottom:0pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:8pt;color:#666666;text-decoration:underline;font-size:11pt;padding-bottom:0pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:8pt;color:#666666;font-size:11pt;padding-bottom:0pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:8pt;color:#666666;font-size:11pt;padding-bottom:0pt;font-family:"Trebuchet MS";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style></head><body class="c26"><p class="c2 c14 c44"><span class="c6 c17 c37 c13"></span></p><p class="c2 c31"><span class="c21 c6 c13">Tournament Results: Getting Started</span></p><p class="c44 c48"><span class="c17 c23 c13"><a class="c33" href="https://www.google.com/url?q=https://docs.google.com/document/d/16IgOm4XprTaKxAa8w02y028oBECOoB1EI1ReddADEeY/export?format%3Dpdf&amp;sa=D&amp;ust=1466845421451000&amp;usg=AFQjCNHuyy3zfHMTRE7UXMN1PT7XihDWbw">PDF Download</a></span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">In Project 2, you will be writing a Python module that uses the PostgreSQL database to keep track of players and matches in a game tournament. </span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">Project 2 was designed to teach you how to create and use databases through the use of database schemas and how to manipulate the data inside the database. This project has two parts: defining the database schema (SQL table definitions) in tournament.sql, and writing code that will use it to track a Swiss tournament in tournament.py.</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c0 c13">Getting Started</span></p><ul class="c28 lst-kix_nf51834beos7-0 start"><li class="c2 c29"><span class="c1 c6">You will complete this project within the Vagrant virtual machine we&#39;ve provided and configured for you. If you would like to review that before moving on refer to the </span><span class="c20 c1"><a class="c33" href="https://www.google.com/url?q=https://www.udacity.com/wiki/ud197/install-vagrant&amp;sa=D&amp;ust=1466845421453000&amp;usg=AFQjCNEqenvQ2bI-gxoqbrtzxUoYSmA8yQ">course materials</a></span><span class="c1 c6">&nbsp;for help with installing Vagrant and Virtual Box, and previously recorded </span><span class="c20 c1"><a class="c33" href="https://www.google.com/url?q=https://plus.google.com/events/co87esmalnf9or687rcl4c468lo?authkey%3DCMaO2Yvm0b-c9gE&amp;sa=D&amp;ust=1466845421454000&amp;usg=AFQjCNEdGarO7tLVKKYIIDVSUWHmToDmRQ">office hours</a></span><span class="c1 c6">&nbsp;where we&#39;ll show you how to use Vagrant. </span></li><li class="c2 c29"><span class="c1 c6 c13">First,</span><span class="c1 c6 c13 c37">&nbsp;fork </span><span class="c1 c6 c13">the </span><span class="c17 c13 c20"><a class="c33" href="https://www.google.com/url?q=http://github.com/udacity/fullstack-nanodegree-vm&amp;sa=D&amp;ust=1466845421455000&amp;usg=AFQjCNFnVdQYW-GhYWDxbXh4OBYSGcFA-w">fullstack-nanodegree-vm repository</a></span><span class="c17 c13">&nbsp;so that you have a version of your own within your Github account.</span></li><li class="c2 c29"><span class="c17">Next clone </span><span class="c17 c13">your</span><span class="c17">&nbsp;fullstack-nanodegree-vm repo </span><span class="c17">to your local machine. </span></li><li class="c2 c29"><span class="c1">Now, let&rsquo;s explore the starter code for this project provided within the VM: </span><span class="c19 c17 c23">cd</span><span class="c1 c6">&nbsp;into</span><span class="c23 c40">&nbsp;</span><span class="c19 c17 c23">/vagrant/tournament</span><span class="c1 c6">&nbsp;where you will see there are 3 files you have to work with on this project:</span></li></ul><ul class="c28 lst-kix_nf51834beos7-1 start"><li class="c2 c39"><span class="c19 c17 c23">tournament.sql</span></li><li class="c2 c39"><span class="c19 c17 c23">tournament.py</span></li><li class="c2 c39"><span class="c19 c17 c23">tournament_test.py</span></li></ul><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c0 c13">Understand the purpose of each file</span></p><ul class="c28 lst-kix_ppozc7ekcm7w-0 start"><li class="c2 c29"><span class="c1 c6 c13">tournament.sql</span><span class="c1 c6 c13">&nbsp; </span><span class="c1 c6">- this file is used to set up your database schema (the table representation of your data structure). </span></li><li class="c2 c29"><span class="c1 c6 c13">tournament.py </span><span class="c1 c6">- this file is used to provide access to your database via a library of functions which can add, delete or query data in your database to another python program (a client program). Remember that when you define a function, it does not execute, it simply means the function is defined to run a specific set of instructions when called. </span></li><li class="c2 c29"><span class="c1 c6 c13">tournament_test.py </span><span class="c1 c6">- this is a client program which will use your functions written in the tournament.py module. We&#39;ve written this client program to test your implementation of functions in tournament.py</span></li></ul><p class="c2 c14 c42"><span class="c1 c6"></span></p><p class="c2 c14"><span class="c0 c13"></span></p><p class="c2"><span class="c0 c13">Using the Vagrant Virtual Machine </span></p><ul class="c28 lst-kix_nf51834beos7-0"><li class="c2 c29"><span class="c1 c6">The Vagrant VM has PostgreSQL installed and configured, as well as the psql command line interface </span><span class="c1">(CLI)</span><span class="c1 c6">, so that you don&#39;t have to install or configure them on your local machine.</span></li><li class="c2 c29"><span class="c1 c6">To use the Vagrant virtual machine, navigate to the full-stack-nanodegree-vm/tournament directory in the terminal, then </span><span class="c1">use the command</span><span class="c1">&nbsp;</span><span class="c1 c9">vagrant up</span><span class="c1 c6">&nbsp;</span><span class="c1 c6">(powers on the virtual machine) </span><span class="c1 c6">followed by </span><span class="c19 c17 c23">vagrant ssh </span><span class="c1 c6">(logs into the virtual machine)</span><span class="c19 c17 c23">. </span><span class="c1 c6">&nbsp;</span></li><li class="c2 c29"><span class="c1 c6">Remember, once you have e</span><span class="c1 c6">xecu</span><span class="c1 c6">ted the </span><span class="c19 c17 c23">vagrant ssh</span><span class="c1 c6">&nbsp;command, you will want to </span><span class="c19 c17 c23">cd /vagrant</span><span class="c1 c6">&nbsp;to change directory to the </span><span class="c20 c1"><a class="c33" href="https://www.google.com/url?q=http://docs.vagrantup.com/v2/getting-started/synced_folders.html&amp;sa=D&amp;ust=1466845421464000&amp;usg=AFQjCNGRbFe03Xh3HUfpvGjO3OKJzZbc9A">synced folders</a></span><span class="c1 c6">&nbsp;in order to work on your project, once your cd /vagrant, if you type </span><span class="c19 c17 c23">ls</span><span class="c1 c6">&nbsp;on the command line, you&#39;ll see your</span><span class="c19 c17 c23">&nbsp;tournament </span><span class="c1 c6">folder</span><span class="c1 c6">. </span></li><li class="c2 c29"><span class="c1">The Vagrant VM provided in the fullstack repo already has PostgreSQL server installed, as well as the psql command line interface (CLI), so you&#39;ll need to have your VM on and be logged into it to run your database configuration file (</span><span class="c19 c17 c23">tournament.sql</span><span class="c1">), and test your Python file with </span><span class="c19 c17 c23">tournament_test.py</span><span class="c1">.</span></li></ul><p class="c2 c14"><span class="c1"></span></p><p class="c2"><span class="c0 c13">Using the psql command line interface</span></p><ul class="c28 lst-kix_nf51834beos7-0"><li class="c2 c29"><span class="c1 c6">The very first time we start working on this project, no database will exist - so first, we&#39;ll need to create the SQL database for our tournament project. From psql, we can do this on the command line directly using a create statement or by importing </span><span class="c19 c17 c23">tournament.sql </span><span class="c1 c6">(which then executes whatever commands are in the .sql script).</span></li><li class="c2 c29"><span class="c19 c17 c23">tournament.sql</span><span class="c1 c6">&nbsp;is where we&#39;ll create our database schema and views; we also have the option of creating the database and tables in this file.</span></li><li class="c2 c29"><span class="c1 c6">With psql, you can run any SQL query on the tables of the currently connected database.</span></li><li class="c2 c29"><span class="c1 c6">When using psql, remember to end SQL statements with a semicolon, which is not always required from Python.</span></li><li class="c2 c29"><span class="c1 c6">To build and access the database we run </span><span class="c9 c17">psql</span><span class="c1 c6">&nbsp;followed by </span><span class="c9 c17">\i tournament.sql</span></li></ul><p class="c2 c14"><span class="c0 c13"></span></p><a id="t.8bfeef155b80f133663e72d778fbc03feb6c13a1"></a><a id="t.0"></a><table class="c18"><tbody><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c27 c1 c6 c13">Command</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c1 c6 c13 c27">Description</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c27 c1 c6 c13">Usage</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c27 c1 c6 c13">Action</span></p></td></tr><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">psql</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">launches the psql command line interface</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">psql tournament</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">launches and connects to tournament database</span></p></td></tr><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\c</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">connect</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\c tournament</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c6 c11">connects to the tournament database, drops connection to previous database</span></p></td></tr><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\i</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">import</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\i tournament.sql</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">executes the sql commands within the sql file from psql</span></p></td></tr><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\?</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">help</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\? </span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">get help with psql commands</span></p></td></tr><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\q</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">quit</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\q</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">quit the psql command line interface</span></p></td></tr><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\d</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">describe</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\d matches</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">describes the table structure</span></p></td></tr><tr class="c12"><td class="c32" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\dt</span></p></td><td class="c34" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">list tables</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">\dt</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c15"><span class="c11 c6">list tables in current database</span></p></td></tr></tbody></table><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">There are many more psql commands you will find useful! </span><span class="c17">Here are two psql cheat sheets for your reference: </span><span class="c3"><a class="c33" href="https://www.google.com/url?q=http://www.postgresonline.com/downloads/special_feature/postgresql83_psql_cheatsheet.pdf&amp;sa=D&amp;ust=1466845421488000&amp;usg=AFQjCNGn4ZqeY9bXeE-gupv_gELvyPF4hw">http://www.postgresonline.com/downloads/special_feature/postgresql83_psql_cheatsheet.pdf</a></span></p><p class="c2"><span class="c3"><a class="c33" href="https://www.google.com/url?q=http://www.petefreitag.com/cheatsheets/postgresql/&amp;sa=D&amp;ust=1466845421488000&amp;usg=AFQjCNF7VEk2of38LohlfTbjY2yDEM2Udw">http://www.petefreitag.com/cheatsheets/postgresql/</a></span><span class="c17 c23">&nbsp;</span></p><p class="c2 c14"><span class="c0 c13"></span></p><p class="c2"><span class="c0 c13">Using the tournament.sql file</span></p><p class="c2"><span class="c1 c6">The tournament.sql file should be used for setting up your schema and database prior to a client making use of the database for reporting and managing tournament players and matches. This file will only be ran once by a client setting up a new tournament database, however we will probably run this file many times as we work on this project.</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">An sql file can contain any sql commands, however we only need to create the database, tables, and views in the tournament.sql file, because we will be running queries from our Python file. The purpose of this file is to set up our data structure: the tables and views. Because we are using psql, you can also utilize psql commands in this file, for example towards the beginning of the file I would include a &quot;\c tournament&quot; command to connect to the tournament database.</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">Our recommendation is to test your sql commands on the psql command line before placing them in your sql file. Once you&#39;ve determined how you want to structure your database and tables, write those commands into your SQL file.</span></p><hr><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2 c4"><span class="c1 c6 c46">A successful development process for this project will mean you are likely cycling between psql command line for experimenting with SQL commands and queries, and writing these commands programmatically into either tournament.sql or tournament.py.</span></p><hr><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2 c14"><span class="c1 c6"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">First off, we need to create the database and connect to it. To do so, we use the commands:</span></p><p class="c2"><span class="c9 c17">vagrant@trusty32: vagrant =&gt; </span><span class="c9 c17">CREATE DATABASE tournament;</span></p><p class="c2"><span class="c9 c17">vagrant@trusty32: vagrant =&gt; \c tournament;</span></p><p class="c2"><span class="c9 c17">vagrant@trusty32: tournament =&gt;</span></p><p class="c2 c14"><span class="c9 c17"></span></p><p class="c2"><span class="c1 c6">Once we have created a database, we can add the tables that we will be working with. A very basic tournament would need at least a Players and Matches table. We can create them with the command:</span></p><p class="c2"><span class="c9 c17">CREATE TABLE [table name](....);</span></p><p class="c2 c14"><span class="c9 c17"></span></p><p class="c2"><span class="c1 c6">As a reminder, you may include these commands in your tournament.sql file, and it will execute when you run </span></p><p class="c2"><span class="c9 c17">vagrant@trusty32: psql =&gt; \i tournament.sql </span></p><p class="c2 c14"><span class="c9 c17"></span></p><p class="c30"><span class="c9 c17">vagrant@vagrant-ubuntu-trusty-32:/vagrant/tournament$ psql<br>vagrant=&gt; \i tournament.sql<br>You are now connected to database &quot;tournament&quot; as user &quot;vagrant&quot;.<br>tournament=&gt;</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">Because we are likely to revise the structure of our tables by adding or removing columns, and restructure our database by adding tables and views, if we rely on the sql file, we will be running it multiple times, and as a result will likely see this error at some point: <br></span><span class="c9 c17">vagrant@trusty32: psql =&gt; </span><span class="c9 c17">ERROR</span><span class="c9 c17">: createdb: </span><span class="c9 c17">database</span><span class="c9 c17">&nbsp;&quot;tournament&quot; </span><span class="c9 c17">already exists</span><span class="c9 c17">.</span></p><p class="c2 c14"><span class="c9 c17"></span></p><p class="c2"><span class="c1 c6">If you look up the SQL command, DROP IF EXISTS, you might decide you want to include this in your SQL file, to address the error above and allow you to use your SQL file repeatedly as you revise your schema. </span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">You&#39;ll need to determine what columns are necessary, and their data types, and include these in the create table command (which can be done from the psql command line to get started, and later added to the .sql file once you are more decided on your table structure). </span></p><p class="c2 c14"><span class="c1 c6 c13"></span></p><p class="c2 c14"><span class="c1 c6 c13"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c14"><span class="c1 c6 c13"></span></p><p class="c2"><span class="c1 c6 c13">tournament.py and tournament_test.py</span></p><p class="c2 c14"><span class="c1 c6 c13"></span></p><p class="c2"><span class="c1 c6">Rely on the unit tests in </span><span class="c19 c17 c23">tournament_test.py </span><span class="c1 c6">as you write your code. Writing your tournament module should &nbsp;be done in conjunction with testing using the</span><span class="c6 c19">&nbsp;</span><span class="c19 c17 c23">tournament_test</span><span class="c19 c17 c23">.py</span><span class="c1 c6">&nbsp;file</span><span class="c1 c6">; </span><span class="c1 c6">&nbsp;If you implement the functions in the order they appear, the test suite can help you incrementally test your code as you write each function. Each function has </span><span class="c1 c6">a</span><span class="c1 c6">&nbsp;corresponding test function and you can comment out the corresponding tests for function you have yet to implement.</span></p><p class="c2"><span class="c1 c6">&nbsp;</span></p><p class="c2"><span class="c1 c6">R</span><span class="c1 c6">ecall </span><span class="c1 c6">the sequence of SQL query commands needed to manipulate database records:</span></p><p class="c2"><span class="c9 c17">conn = connect()<br>c = conn.cursor()<br>c.execute(</span><span class="c9 c17">&quot;</span><span class="c9 c17">your query;&quot;)<br>conn.commit() <br>conn.close(</span><span class="c9 c17">)</span><hr style="page-break-before:always;display:none;"></p><p class="c2"><span class="c1 c6">The various functions in </span><span class="c19 c17 c23">tournament.py</span><span class="c1 c6">&nbsp;and their corresponding test functions in </span><span class="c19 c17 c23">tournament_test.py</span><span class="c1 c6">&nbsp;are:</span></p><p class="c2 c14"><span class="c6 c22 c47"></span></p><a id="t.de25c36364da87724be4c9d05c12effded58b8e5"></a><a id="t.1"></a><table class="c18"><tbody><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c6 c17 c22 c13">tournament.py </span><span class="c27 c17 c38 c13">function</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c16 c30"><span class="c6 c17 c13 c22">tournament_test.py </span><span class="c27 c17 c13 c38">test function</span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c9 c17">connec</span><span class="c8">t</span></p><p class="c2 c16"><span class="c6 c17">Meant to connect to the database. Already set up for you.</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c16 c14 c30"><span class="c6 c22 c41"></span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">deleteMatches </span></p><p class="c2 c16"><span class="c1 c6">Remove all the matches records from the database.</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c16 c30"><span class="c9 c17">testDeleteMatches</span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">deletePlayers</span></p><p class="c2 c16"><span class="c1 c6">Remove all the player records from the database.</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c16 c30"><span class="c9 c17">testDelete</span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">countPlayers </span></p><p class="c2 c16"><span class="c1 c6">Returns the number of players currently registered</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">testCount</span></p><p class="c16 c14 c30"><span class="c24 c6 c22"></span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c9 c17">registerPlayer -- </span><span class="c1 c6">Adds a player to the tournament database.</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c2 c16"><span class="c9 c17">testRegister, testRegisterCountDelete</span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">playerStandings -- </span></p><p class="c2 c16"><span class="c1 c6">Returns a list of the players and their win records, sorted by wins. You can use the player standings table created in your .sql file for reference.</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c16 c30"><span class="c9 c17">testStandingsBeforeMatches</span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">reportMatch</span></p><p class="c2 c16"><span class="c1 c6">This is to simply populate the matches table and record the winner and loser as (winner,loser) in the insert statement.</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c16 c30"><span class="c9 c17">testReportMatches</span></p></td></tr><tr class="c12"><td class="c25" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">swissPairings</span></p><p class="c2 c16"><span class="c27 c1 c6 c45">Returns a list of pairs of players for the next round of a match. Here all we are doing is the pairing of alternate players from the player standings table, zipping them up and appending them to a list with values:</span></p><p class="c2 c16"><span class="c1 c6">(id1, name1, id2, name2)</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c2 c16"><span class="c8">testPairings</span></p><p class="c16 c14 c30"><span class="c6 c22 c24"></span></p></td></tr></tbody></table><p class="c2 c14"><span class="c0 c13"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c14"><span class="c0 c13"></span></p><p class="c2"><span class="c0 c13">Running your project!</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">Once you have your .sql and .py files set up, it&rsquo;s a good idea to test them out against the testing file provided to you</span><span class="c1 c6">&nbsp;(tournament_test.py)</span><span class="c1 c6">.</span><span class="c1 c6">&nbsp;To run the series of tests defined in this test suite, run the program from the command line </span><span class="c1 c9">$ python tournament_test.py</span><span class="c1 c6">&nbsp;</span></p><p class="c2 c14"><span class="c9 c17"></span></p><p class="c2"><span class="c1 c6">You should be able to see the following output once all your tests have passed:</span></p><a id="t.179b0f07b8f8a2ba11291a644c81f1fb0cb562e7"></a><a id="t.2"></a><table class="c18"><tbody><tr class="c12"><td class="c36" colspan="1" rowspan="1"><p class="c16 c30"><span class="c8">vagrant@vagrant-ubuntu-trusty-32:/vagrant/tournament$ python tournament_test.py<br>1. Old matches can be deleted.<br>2. Player records can be deleted.<br>3. After deleting, countPlayers() returns zero.<br>4. After registering a player, countPlayers() returns 1.<br>5. Players can be registered and deleted.<br>6. Newly registered players appear in the standings with no matches.<br>7. After a match, players have updated standings.<br>8. After one match, players with one win are paired.<br>Success! &nbsp;All tests pass!<br>vagrant@vagrant-ubuntu-trusty-32:/vagrant/tournament$</span></p></td></tr></tbody></table><p class="c2 c14"><span class="c9 c17"></span></p><p class="c2"><span class="c1 c6">If your tests don&rsquo;t pass that&rsquo;s okay! The test suite will print explanations of what didn&rsquo;t work. You can read the tests themselves to see exactly how they work.</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6 c13">To Submit</span></p><p class="c2"><span class="c1 c6">Once you have finished your project, go to this link </span><span class="c20 c1"><a class="c33" href="https://www.google.com/url?q=https://review.udacity.com/%23!/projects/4/start&amp;sa=D&amp;ust=1466845421522000&amp;usg=AFQjCNGOc7HIKQd4_jv9yzkaUbOaUaj2sQ">here</a></span><span class="c1 c6">. If you have a Github account (which we recommend), connect with Github to get started. If you do not have a Github account, follow the instructions </span><span class="c20 c1"><a class="c33" href="https://www.google.com/url?q=https://github.com/blog/1510-installing-git-from-github-for-mac&amp;sa=D&amp;ust=1466845421523000&amp;usg=AFQjCNH0MhKw2iMZ7iUctFAf_9Pq94YHNQ">here</a></span><span class="c1 c6">&nbsp;for Mac OS X 10.0 or later, </span><span class="c20 c1"><a class="c33" href="https://www.google.com/url?q=https://git-for-windows.github.io/&amp;sa=D&amp;ust=1466845421524000&amp;usg=AFQjCNHR9TEFLOeZ5rTcxRoj9tNonU9aaQ">here</a></span><span class="c1 c6">&nbsp;for Windows 7, 8, or 8.1, or </span><span class="c20 c1"><a class="c33" href="https://www.google.com/url?q=https://review.udacity.com/%23!/help/github_tutorial_create_account&amp;sa=D&amp;ust=1466845421524000&amp;usg=AFQjCNGEwFCnbDaV3B8GGVZwZVIaEwch7g">here</a></span><span class="c1 c6">&nbsp;for anything else. These links will help you create a Github account to submit your project.</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">If you run into any trouble, send us an e-mail at </span><span class="c20 c1"><a class="c33" href="mailto:fullstack-project@udacity.com">fullstack-project@udacity.com</a></span><span class="c1 c6">, and we will be more than happy to help you.</span><hr style="page-break-before:always;display:none;"></p><p class="c2"><span class="c0 c13">Example of a 16 Player Swiss Tournament:</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">First round pairing is by random draw. For example, with 16 players they would be matched into 8 random pairs for the first round. For now, assume all games have a winner, and there are no draws.</span></p><p class="c2 c14"><span class="c1 c6 c13"></span></p><p class="c2"><span class="c1 c6 c13">After the first round</span><span class="c1 c6">, there will be a group of 8 players with a score of 1 (win), and a group of 8 players with a score of 0 (loss). For the 2nd round, players in each scoring group will be paired against each other &ndash; 1&rsquo;s versus 1&rsquo;s and 0&rsquo;s versus 0&rsquo;s.</span></p><p class="c2 c14"><span class="c1 c6 c13"></span></p><p class="c2"><span class="c1 c6 c13">After round 2,</span><span class="c1 c6">&nbsp;there will be three scoring groups:</span></p><p class="c2"><span class="c1 c6">4 players who have won both games and have 2 points</span></p><p class="c2"><span class="c1 c6">8 players who have won a game and lost a game and have 1 point</span></p><p class="c2"><span class="c1 c6">4 players who have lost both games and have no points.</span></p><p class="c2 c14"><span class="c1 c6 c13"></span></p><p class="c2"><span class="c1 c6 c13">Again, for round 3</span><span class="c1 c6">, players are paired with players in their scoring group. After the third round, the typical scoring groups will be:</span></p><p class="c2"><span class="c1 c6">2 players who have won 3 games (3 points)</span></p><p class="c2"><span class="c1 c6">6 players with 2 wins (2 points)</span></p><p class="c2"><span class="c1 c6">6 players with 1 win (1 point)</span></p><p class="c2"><span class="c1 c6">2 players with no wins (0 points)</span></p><p class="c2 c14"><span class="c1 c6 c13"></span></p><p class="c2"><span class="c1 c6 c13">For the fourth (and in this case final) round</span><span class="c1 c6">, the process repeats, and players are matched with others in their scoring group. Note that there are only 2 players who have won all of their games so far &ndash; they will be matched against each other for the &quot;championship&quot; game. After the final round, we&rsquo;ll have something that looks like this:</span></p><p class="c2"><span class="c1 c6">1 player with 4 points &ndash; the winner!</span></p><p class="c2"><span class="c1 c6">4 players with 3 points &ndash; tied for second place</span></p><p class="c2"><span class="c1 c6">6 players with 2 points</span></p><p class="c2"><span class="c1 c6">4 players with 1 point</span></p><p class="c2"><span class="c1 c6">1 player with 0 points</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2"><span class="c1 c6">The Swiss system produces a clear winner in just a few rounds, no-one is eliminated and almost everyone wins at least one game, but there are many ties to deal with.</span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2 c14"><span class="c1 c6"></span></p><p class="c2 c14"><span class="c1 c6"></span></p></body></html>